This simulator implements what has been defined as Rule B3/S23, which is the classic life algorithm rules

====================================================================================================================
http://en.wikipedia.org/wiki/Conway's_Game_of_Life
http://dotat.at/prog/life/life.html
http://developer.download.nvidia.com/SDK/9.5/Samples/samples.html#GL_GameOfLife ( NVidia GeForce2 Ultra 72 million cells per second)
http://members.tip.net.au/~dbell/ hashlife implementation


====================================================================================================================
Use .NET Reflector to see code as is and with inlining of CountNeighbours

====================================================================================================================
SkipTable or SkipCache
Try an engine with skipping large areas of dead space.

Track the x,y of areas to start iterating. An area to start/end would be a collection of x,y coordinates
such that in NextGeneration the first area would define the beginning and ending x,y coordinates to iterate
Also in NextGeneration this table would be re-built for the next generation.

A start coordinate would need to be determined by the first live cells x,y -2 to allow for checking a dead
cell for its chance to become alive.

The very first coordinate and last coordinate could be set when a pattern is loaded as the information
to build the table would be available at that time, else, the table would need to start with 0,0 and Width-1,
Height-1, and then be updated in the first generation.

====================================================================================================================
Thoughts on a bit array based engine
80*25 = 2000
BitArray bits = new BitArray(Width*Height, false);

2D to 1D (y * maxX) + x;
1D to 2D y = n / maxX x = n % maxX
xxxxxxxxxx xxxxxxxxxx xxxxxxxxxx xxxxxxxxxx
xOxxxxxxxx xxxxxxxxxx xxxxxxxxxx xxxxxxxxxx

OOO
OcO = 11111111
OOO

xxx
xcx = 00000000
xxx

Oxx
xcx = 10000000
xxx

01000000
00100000

====================================================================================================================
Implement a common Life file format reader/writer
Format details: http://psoup.math.wisc.edu/mcell/ca_files_formats.html

	Extended RLE format (Copied from Golly help)
	Golly prefers to store patterns and pattern fragments in a simple concise textual format we call "Extended RLE" 
	(it's a modified version of the RLE format created by Dave Buckingham). The data is run-length encoded which 
	works well for sparse patterns while still being easy to interpret (either by a machine or by a person). 
	The format permits retention of the most critical data: 

		The cell configuration; ie. which cells have what values. 
		The transition rule to be applied. 
		Any comments or description. 
		The generation count. 
		The absolute position on the screen.

	Golly uses this format for internal cuts and pastes, which makes it very convenient to move cell configurations 
	to and from text files. For instance, the r-pentomino is represented as x = 3, y = 3, rule = B3/S23 b2o$2o$bo! 

	I just drew this pattern in Golly, selected the whole thing, copied it to the clipboard, and then in my editor 
	I did a paste to get the textual version. Similarly, data in this format can be cut from a browser or email 
	window and pasted directly into Golly. 

	RLE data is indicated by a file whose first non-comment line starts with "x". A comment line is either a 
	blank line or a line beginning with "#". The line starting with "x" gives the dimensions of the pattern 
	and usually the rule, and has the following format: 
		x = width, y = height, rule = rule 
	where width and height are the dimensions of the pattern and rule is the rule to be applied. Whitespace 
	can be inserted at any point in this line except at the beginning or where it would split a token. 
	The dimension data is ignored when Golly loads a pattern, so it need not be accurate, but it is not 
	ignored when Golly pastes a pattern; it is used as the boundary of what to paste, so it may be larger 
	or smaller than the smallest rectangle enclosing all live cells. 

	Any line that is not blank, or does not start with a "#" or "x " or "x=" is treated as run-length encoded 
	pattern data. The data is ordered a row at a time from top to bottom, and each row is ordered left to right. 
	A "$" represents the end of each row and an optional "!" represents the end of the pattern. 
	For two-state rules, a "b" represents an off cell, and a "o" represents an on cell. For rules with more than 
	two states, a "." represents a zero state; states 1..24 are represented by "A".."X", states 25..48 by "pA".."pX", 
	states 49..72 by "qA".."qZ", and on up to states 241..255 represented by "yA".."yO". 
	The pattern reader is flexible and will permit "b" and "." interchangeably and "o" and "A" interchangeably. 

	Any data value or row terminator can be immediately preceded with an integer indicating a repetition count. 
	Thus, "3o" and "ooo" both represent a sequence of three on cells, and "5$" means finish the current row and 
	insert four blank rows, and start at the left side of the row after that. 

	The pattern writer attempts to keep lines about 70 characters long for convenience when sharing patterns or 
	storing them in text files, but the reader will accept much longer lines. 

	If the File menu's "Save Extended RLE" option is ticked then comment lines with a specific format will be added 
	at the start of the file to convey extra information. These comment lines start with "#CXRLE" and contain 
	keyword/value pairs. The keywords currently supported are "Pos", which denotes the absolute position of the upper 
	left cell (which may be on or off), and "Gen", which denotes the generation count. For instance, 
	#CXRLE Pos=0,-1377 Gen=3480106827776 
	indicates that the upper left corner of the enclosing rectange is at an X coordinate of 0 and a Y coordinate 
	of -1377, and that the pattern stored is at generation 3,480,106,827,776. 
	All comment lines that are not CXRLE lines, and occur at the top or bottom of the file, are treated as 
	information lines and are displayed when the user clicks the "information" button in Golly's tool bar. 
	Any comment lines interspersed with the pattern data will not be displayed. 

====================================================================================================================
Faster implementations
unbounded universe using quadtrees
http://www.drdobbs.com/high-performance-computing/184406478;jsessionid=XM4DQWAW2JH35QE1GHRSKH4ATMY32JVN
	Each node of the tree represents a square portion of the universe. The leaves of the tree are single bits, 
	either 1 (alive) or 0 (dead). Each nonleaf node represents a larger square composed of four children, who 
	are named by their direction from center: nw is the name of the northwest smaller square, ne the northeast 
	smaller square, and so on. The level of a node is the distance to the leaves; the leaves are at level 0. 
	A node at level n thus represents a square of size 2n on each edge.
